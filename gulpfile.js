// Generated by CoffeeScript 1.9.3
(function() {
  var bower, coffee, coffeeFiles, concat, gulp, gutil, handleError, minifyCss, parallelize, path, paths, rename, sass, sh, sourcemaps, tap, threads, touch, useSourceMaps;

  gulp = require('gulp');

  gutil = require('gulp-util');

  coffee = require('gulp-coffee');

  sourcemaps = require('gulp-sourcemaps');

  touch = require('touch');

  path = require('path');

  tap = require('gulp-tap');

  bower = require('bower');

  concat = require('gulp-concat');

  sass = require('gulp-sass');

  minifyCss = require('gulp-minify-css');

  rename = require('gulp-rename');

  sh = require('shelljs');

  parallelize = require("concurrent-transform");

  threads = 100;

  useSourceMaps = true;

  coffeeFiles = ['./gulpfile.coffe', './www/js/**/*.coffee'];

  paths = {
    sass: ['./scss/**/*.scss']
  };

  handleError = function(err) {
    console.log(err.toString());
    return this.emit('end');
  };

  gulp.task('sass', function(done) {
    return gulp.src('./scss/ionic.app.scss').pipe(sass()).pipe(gulp.dest('./www/css/')).pipe(minifyCss({
      keepSpecialComments: 0
    })).pipe(rename({
      extname: '.min.css'
    })).pipe(gulp.dest('./www/css/')).on('end', done);
  });

  gulp.task('install', ['git-check'], function() {
    return bower.commands.install().on('log', function(data) {
      return gutil.log('bower', gutil.colors.cyan(data.id), data.message);
    });
  });

  gulp.task('git-check', function(done) {
    if (!sh.which('git')) {
      console.log('  ' + gutil.colors.red('Git is not installed.'), '\n  Git, the version control system, is required to download Ionic.', '\n  Download git here:', gutil.colors.cyan('http://git-scm.com/downloads') + '.', '\n  Once git is installed, run \'' + gutil.colors.cyan('gulp install') + '\' again.');
      process.exit(1);
    }
    return done();
  });

  gulp.task('touch', function() {
    return gulp.src(coffeeFiles).pipe(tap(function(file, t) {
      return touch(file.path);
    }));
  });

  gulp.task('coffeescripts', function() {
    return gulp.src(coffeeFiles).pipe(parallelize(coffee({
      bare: true
    }).on('error', gutil.log), threads)).pipe(parallelize((useSourceMaps ? sourcemaps.init() : gutil.noop()), threads));
  });

  gulp.task('watch', function() {
    gulp.watch(coffeeFiles, ['coffeescripts']);
    return gulp.watch(paths.sass, ['sass']);
  });

  gulp.task('default', ['watch', 'coffeescripts', 'sass']);

  gulp.task('done', (function() {}));

}).call(this);

//# sourceMappingURL=gulpfile.js.map
